%{
    #include "output.hpp"
    using namespace output;
    
    extern int yylex();
    void yyerror(const char*);
    extern int yylineno;
%}

/* prec to solve shift/reduce Exp -> LPAREN Exp RPARENT vs. Statement/Call -> *** LPAREN Exp RPAREN *** (prefer shifting over reduce-19) */
%nonassoc LOW_PREC_PAREN_EXP

/* No ambiguity in these tokens */
%token INT BYTE BOOL
%token TRUE FALSE
%token BREAK CONTINUE
%token RETURN
%token STRING
%token WHILE
%token IF

/* Put B below NUM to solve shift/reduce with Exp -> NUM vs. Exp -> NUM B (prefer shift-B over reduce-23) */
%nonassoc NUM
%nonassoc B

/* Put SC and RPAREN below ID to solve shift/reduce with Exp -> ID vs. Statement -> *** ID *** SC and Call -> ID LPAREN Exp RPAREN (prefer shift-*** over reduce-21) */
%nonassoc ID
%nonassoc SC

/* From operator presedence table */
%right ASSIGN
%left OR
%left AND
%left EQUALITY /* == or != */
%left RELATIONAL /* > or >= or < or <= */
%left ADDITIVE /* + or - */
%left MULTIPLICATIVE /* * or / */
%right NOT
%left LPAREN RPAREN
%left LBRACE RBRACE

/* Put ELSE below RPAREN to solve Dangling-Else problem (prefer shift-ELSE over reduce-10) */
%nonassoc ELSE

/* prec to solve shift/reduce Exp -> Call vs. Statement -> Call SC (prefer shift-SC over reduce-22) */
%nonassoc HIGH_PREC_CALL

%%

Program:    Statements {printProductionRule(1);}
;

Statements:     Statement {printProductionRule(2);}
                | Statements Statement {printProductionRule(3);}
;

Statement:      LBRACE Statements RBRACE {printProductionRule(4);}
                | Type ID SC {printProductionRule(5);}
                | Type ID ASSIGN Exp SC {printProductionRule(6);}
                | ID ASSIGN Exp SC {printProductionRule(7);}
                | Call SC %prec HIGH_PREC_CALL {printProductionRule(8);}
                | RETURN SC {printProductionRule(9);}
                | IF LPAREN Exp RPAREN Statement {printProductionRule(10);}
                | IF LPAREN Exp RPAREN Statement ELSE Statement {printProductionRule(11);}
                | WHILE LPAREN Exp RPAREN Statement {printProductionRule(12);}
                | BREAK SC {printProductionRule(13);}
                | CONTINUE SC {printProductionRule(14);} 
;

Call:           ID LPAREN Exp RPAREN {printProductionRule(15);}
;

Type:            INT {printProductionRule(16);}
                | BYTE {printProductionRule(17);}
                | BOOL {printProductionRule(18);}
;

Exp:            LPAREN Exp RPAREN %prec LOW_PREC_PAREN_EXP {printProductionRule(19);}
                | Exp ADDITIVE Exp {printProductionRule(20);}
                | Exp MULTIPLICATIVE Exp {printProductionRule(20);}
                | ID {printProductionRule(21);}
                | Call {printProductionRule(22);}
                | NUM {printProductionRule(23);}
                | NUM B {printProductionRule(24);}
                | STRING {printProductionRule(25);}
                | TRUE {printProductionRule(26);}
                | FALSE {printProductionRule(27);}
                | NOT Exp {printProductionRule(28);}
                | Exp AND Exp {printProductionRule(29);}
                | Exp OR Exp {printProductionRule(30);}
                | Exp EQUALITY Exp {printProductionRule(31);}
                | Exp RELATIONAL Exp {printProductionRule(31);}
                | LPAREN Type RPAREN Exp {printProductionRule(32);}
;

%%

void yyerror(const char*) {errorSyn(yylineno); exit(1);}

int main() {
    return yyparse();
}
