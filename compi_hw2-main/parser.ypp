%{
#include "output.hpp"

extern int yylineno;
extern int yylex();
int yyerror(const char* message);

using namespace output;
%}

%nonassoc LOW_PREC_PAREN_EXP

%token INT BYTE BOOL
%token TRUE FALSE
%token BREAK CONTINUE
%token RETURN
%token STRING
%token WHILE
%token IF

%nonassoc NUM
%nonassoc B

%nonassoc ID
%nonassoc SC

%right ASSIGN
%left OR
%left AND
%left EQUALORNOT 
%left RELOP 
%left MINUS_PLUS 
%left DIV_MUL 
%right NOT
%left LPAREN RPAREN
%left LBRACE RBRACE

%nonassoc ELSE

%nonassoc Max_Priority

%%

Program: Statements {
    printProductionRule(1);
}
;

Statements:
    Statement {
        printProductionRule(2);
    }
    | Statements Statement {
        printProductionRule(3);
    }
;

Statement:
    Type ID ASSIGN Exp SC {
        printProductionRule(6);
    }
    | IF LPAREN Exp RPAREN Statement ELSE Statement {
        printProductionRule(11);
    }
    | RETURN SC {
        printProductionRule(9);
    }
    | Type ID SC {
        printProductionRule(5);
    }
    | IF LPAREN Exp RPAREN Statement {
        printProductionRule(10);
    }
    | WHILE LPAREN Exp RPAREN Statement {
        printProductionRule(12);
    }
    | LBRACE Statements RBRACE {
        printProductionRule(4);
    }
    | ID ASSIGN Exp SC {
        printProductionRule(7);
    }
    | Call SC %prec Max_Priority {
        printProductionRule(8);
    }
    | BREAK SC {
        printProductionRule(13);
    }
    | CONTINUE SC {
        printProductionRule(14);
    }
;

Call: ID LPAREN Exp RPAREN {
    printProductionRule(15);
}
;

Type:
    INT {
        printProductionRule(16);
    }
    | BYTE {
        printProductionRule(17);
    }
    | BOOL {
        printProductionRule(18);
    }
;

Exp:
    LPAREN Exp RPAREN %prec LOW_PREC_PAREN_EXP {
        printProductionRule(19);
    }
    | Exp MINUS_PLUS Exp {
        printProductionRule(20);
    }
    | Exp DIV_MUL Exp {
        printProductionRule(20);
    }
    | ID {
        printProductionRule(21);
    }
    | Call {
        printProductionRule(22);
    }
    | NUM {
        printProductionRule(23);
    }
    | NUM B {
        printProductionRule(24);
    }
    | STRING {
        printProductionRule(25);
    }
    | TRUE {
        printProductionRule(26);
    }
    | FALSE {
        printProductionRule(27);
    }
    | NOT Exp {
        printProductionRule(28);
    }
    | Exp AND Exp {
        printProductionRule(29);
    }
    | Exp OR Exp {
        printProductionRule(30);
    }
    | Exp EQUALORNOT Exp {
        printProductionRule(31);
    }
    | Exp RELOP Exp {
        printProductionRule(31);
    }
    | LPAREN Type RPAREN Exp {
        printProductionRule(32);
    }
;
%%

int main() {
    return yyparse();
}

int yyerror(const char* message) {
    errorSyn(yylineno);
    exit(1);
}
